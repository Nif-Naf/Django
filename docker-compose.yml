version: "3.9"

services:

  django:
    build: .
    image: custom_django
    container_name: django
    hostname: django
#    volumes:
#      - .:/project
    command: sh -c "
      python manage.py makemigrations storage &&
      python manage.py migrate && 
      python manage.py runserver 0.0.0.0:8000 
      "
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD-SHELL", "curl -o /dev/null -s -w '%{http_code}\n' http://localhost:8000/admin/login/?next=/admin/ || 200"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    depends_on:
      postgres:
        condition: service_healthy
#      storage_regular_worker:
#        condition: service_healthy

  # Клиент для основной базы данных.
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    hostname: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: pgadmin4@pgadmin.org
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_PORT_OUT: 5555
    ports:
      - "80:80"
    depends_on:
      postgres:
        condition: service_healthy
    restart: always

  # База данных.
  postgres:
    image: postgres:latest
    container_name: postgres
    hostname: postgres
    environment:
      POSTGRES_DB: main
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
#    volumes:
#      - ./postgresql/dumps:/project/dumps
#      - ./postgresql/data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d main" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: always

  # Дополнительная база данных.
  redis:
    image: redis:latest
    container_name: redis
    hostname: redis
    command: redis-server --save 20 1 --loglevel warning
    ports:
      - '6379:6379'
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: always

  storage_regular_worker:
    build: .
    image: custom_storage_regular_worker
    container_name: storage_regular_worker
    hostname: storage_regular_worker
    command: celery -A apps.storage.workers.regular worker -l info
    depends_on:
      redis:
        condition: service_healthy
    restart: always
